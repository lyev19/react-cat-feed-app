"use strict";
/**
 * Set Alarm
 * Creates push notifications for alarm
 * @id {string}
 * @date {string} ISO format
 * @oid {string} needed for iOS. oid = Original ID.
 * @snooze {int} minutes
 * @message {string} Alarm message
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.activateAlarmWithoutEdit = void 0;
// libs
var react_native_1 = require("react-native");
var react_native_push_notification_1 = __importDefault(require("react-native-push-notification"));
// local
var getAlarms_1 = require("../getAlarms");
var editAlarmWithoutActivateAlarm_1 = require("./editAlarmWithoutActivateAlarm");
// doesn't call edit alarm again
// should only be used within the library
var activateAlarmWithoutEdit = function (id) { return __awaiter(void 0, void 0, void 0, function () {
    var alarm, date, now, addDayToDate, snooze, repeatTime, androidAlarm, repeatTime, iosAlarm;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!id) {
                    throw new Error("Please enter an id");
                }
                return [4 /*yield*/, (0, getAlarms_1.getAlarmById)(id)];
            case 1:
                alarm = _a.sent();
                if (!alarm) {
                    throw new Error("There is not an alarm with this id");
                }
                date = alarm.date;
                now = Date.now();
                if (!(now > new Date(date).getTime())) return [3 /*break*/, 3];
                addDayToDate = new Date(now + 3600 * 1000 * 24).toISOString();
                return [4 /*yield*/, (0, editAlarmWithoutActivateAlarm_1.editAlarmWithoutActivateAlarm)(Object.assign({}, alarm, {
                        date: addDayToDate,
                        active: true,
                    }))];
            case 2:
                _a.sent();
                date = addDayToDate;
                _a.label = 3;
            case 3:
                snooze = alarm.snooze;
                if (react_native_1.Platform.OS === "android") {
                    repeatTime = 1000 * 60 * Number(snooze);
                    androidAlarm = Object.assign({}, alarm, {
                        date: new Date(date),
                        id: JSON.stringify(id),
                        notificationId: id,
                        repeatType: "time",
                        repeatTime: repeatTime,
                        userInfo: __assign(__assign({}, alarm.userInfo), { id: JSON.stringify(id), oid: JSON.stringify(id), snooze: snooze }),
                    });
                    react_native_push_notification_1.default.localNotificationSchedule(androidAlarm);
                }
                else {
                    repeatTime = snooze * 1000;
                    iosAlarm = Object.assign({}, alarm, {
                        date: new Date(date),
                        repeatType: "minute",
                        repeatTime: repeatTime,
                        userInfo: __assign(__assign({}, alarm.userInfo), { oid: id, id: id, snooze: snooze }),
                    });
                    react_native_push_notification_1.default.localNotificationSchedule(iosAlarm);
                    // todo: add multiple alarms for ios
                    // ios push notifications only last for 5 seconds.
                    // This sets multiple push notifications for ios.
                    // for (let j = 0; j < 10; j++) {
                    //   let initialAlarm = moment(date).add(Number(snooze) * j, "minutes");
                    //   for (let i = 0; i < 4; i++) {
                    //     let tempDate = moment(initialAlarm).add(i * 8, "seconds");
                    //     PushNotification.localNotificationSchedule({
                    //       message: message,
                    //       soundName,
                    //       date: new Date(tempDate),
                    //       userInfo: {
                    //         ...userInfo,
                    //         id: id + String(j) + String(i),
                    //         oid: id,
                    //         snooze,
                    //       },
                    //     });
                    //   }
                    // }
                }
                return [2 /*return*/];
        }
    });
}); };
exports.activateAlarmWithoutEdit = activateAlarmWithoutEdit;
